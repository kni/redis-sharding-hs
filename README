Redis Sharding
**************

http://github.com/kni/redis-sharding-hs

Haskell version of "Redis Sharding" (http://github.com/kni/redis-sharding)

For resharding see http://github.com/kni/redis-sharding.

Redis Sharding with fully support MSET, MSETNX, MGET, DEL commands.


NOTA BENE
---------

To achieve the best efficiency while sharding data it is especially important to use pipelining by the client.
The importance increases according to the number of node for multikeys commands (multi-nodes commands, if more precisely).
And it increases twice only in comparison with the usual redis server. :-)


BUILD
-----

	ghc -threaded -rtsopts -O2 --make redis_sharding.hs

RUN
-----

	./redis_sharding --nodes=10.1.1.1:6380,10.1.1.1:6381,...

or to use all CPU core run as

	./redis_sharding --nodes=10.1.1.1:6380,10.1.1.1:6381,... +RTS -N

ATTENTION! +RTS -N must be after of all others parameters.

Others parameters:

	--host=10.1.1.1
	--port=6379
	--timeout=300 (0 - disable timeout)
	

NOTES
-----

timeout
~~~~~~~

As opposed to the Perl version, the Haskell version RedisSharding is built in the "lazy style".
If the client is not responding, RedisSharding won't detect closing connection by the server because of time-out.
So, the time-outs execution is added into the RedisSharding itself (timeout keys, seconds).
